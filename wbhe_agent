#!/bin/bash

if [[ -e /etc/wbhe_agent.conf ]]
then
# shellcheck disable=SC1091
  source /etc/wbhe_agent.conf
else
  cat << EOF > /etc/wbhe_agent.conf
WBHE_LOG_FILE=/var/log/bash_history.log
WBHE_AGENT_PATH=/usr/local/bin/wbhe_agent
DOWNLOAD_URL=https://raw.githubusercontent.com/jaekwon-park/web_bash_history_extend/master/wbhe_agent
INOTIFY_DOWNLOAD_URL=http://cloud.github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz
SERVER_URL="http://wbhe.ddb.infra.farm/"
SERVER_API="api/v1/log"
UPLOAD_URL="api/v1/log/upload"
X_API_KEY="48ocss0844swwgos8gcggc40wgsggo848wkoow4c1"
MESSAGE_REPEAT_FILTER="message repeated"
CHANGED_FILE_FILTER="Changed_the_file"
EOF
# shellcheck disable=SC1091
  source /etc/wbhe_agent.conf
fi

INOTIFYWAIT_PATH=$(type -p inotifywait)
WBHE_SERVER_URL="$SERVER_URL""$SERVER_API"
WBHE_SERVER_UPLOAD_URL="$SERVER_URL""$UPLOAD_URL"
CHANGE_FILE_STORE="$(mktemp /tmp/wbhe.XXXXXXXXXX)"
CHANGE_FILE_STATUS="$(mktemp /tmp/wbhe.XXXXXXXXXX)"

SET_OPTION_VALUE_COUNT=0
SET_OPTION_VALUE[0]=""
SET_OPTION[0]=""

#PARSED_OPTION=$(getopt -n "$0" -o u:k: --long "url:,keyset:" -- "$@")
#if [ $? -ne 0 ]; then
if ! PARSED_OPTION=$(getopt -n "$0" -o u:k: --long "url:,key:" -- "$@"); then
  echo "invaild option "
  exit 1
fi
eval set -- "$PARSED_OPTION"

while true; do
  case $1 in
  -u | --url)
    echo "$1 was triggered, Parameter: $2" >&2
    SET_OPTION_VALUE[$SET_OPTION_VALUE_COUNT]="$2"
    SET_OPTION[$SET_OPTION_VALUE_COUNT]="SERVER_URL"
    let SET_OPTION_VALUE_COUNT=$SET_OPTION_VALUE_COUNT+1
    shift 2
    ;;
  -k | --key)
    echo "$1 was triggered, Parameter: $2" >&2
    SET_OPTION_VALUE[$SET_OPTION_VALUE_COUNT]="$2"
    SET_OPTION[$SET_OPTION_VALUE_COUNT]="X_API_KEY"
    let SET_OPTION_VALUE_COUNT=$SET_OPTION_VALUE_COUNT+1
    shift 2
    ;;
  --)
    shift
    break
    ;;
  esac
done

COMMAND=$1
let SET_OPTION_VALUE_COUNT=$SET_OPTION_VALUE_COUNT-1
shift

#######################################
# Exception Check for Every command
#
# Arguments:
#   excuted command
# Returns:
#   None or exit 1
#
#######################################
function exception_check() {
  if [ "$?" -eq 0 ]; then
    echo "done" > /dev/null
  else
    echo "above task return code "$?
    echo "something wrong"
    exit 1
  fi
}

#######################################
# Set Parameter
#   Set Parameter for Server url and X_API_KEY
#
# Arguments:
#   None
# Returns:
#   None
#
#######################################
function set() {
  set_line_number="$(grep -Rn ^"$1" /etc/wbhe_agent.conf |  awk -F: '{print $1}')"
  sed -i "$set_line_number""d" /etc/wbhe_agent.conf
  echo "$1"="$2" >> /etc/wbhe_agent.conf
  exception_check
}

#######################################
# Self Update function
#   Download Program from git repository and check hash result then change file
#
# Arguments:
#   None
# Returns:
#   None
#
#######################################
function update() {
  if [[ "$(pgrep -f "wbhe_agent run" | wc -l)" -eq 0 ]]; then
    curl -w ' [:: %{size_download} byte has been downloaded ::]\n' -L -# "$DOWNLOAD_URL"?"$(date +%s)" -o /tmp/wbhe_agent
    exception_check
    if [ "$(md5sum /tmp/wbhe_agent | awk '{print $1}')" != "$(md5sum "$WBHE_AGENT_PATH" | awk '{print $1}')" ]; then
      chmod +x /tmp/wbhe_agent
      exception_check
      mv -f /tmp/wbhe_agent "$WBHE_AGENT_PATH"
      exception_check
      echo "update done"
    else
      rm -rf /tmp/wbhe_agent
      echo "wbhe_agent already up to date"
    fi
  else
    echo "wbhe_agent runnig"
  fi
}

#######################################
# Stop agent
#   find "wbhe_agent" pid and kill
#
# Arguments:
#   None
# Returns:
#   None
#
#######################################
function stop() {
  if [[ "$(pgrep -f "wbhe_agent run" | wc -l)" -ne 0 ]]; then
    local pid
    for pid in $(pgrep -f "wbhe_agent run"); do
      echo "wbhe_agent running pid : $pid"
      echo "Try stop wbhe_agent"
      kill -9 "$pid"
      exception_check
    done
  else
    echo "can't find wbhe_agent process"
    exit 0
  fi
}

#######################################
# Check inotifywait program
#   if doens't exist download and compile (rhel/centos) or package install (ubuntu)
#
# Arguments:
#   None
# Returns:
#   None
#
#######################################
function check_tools() {
  # inotify-tools installation check and install
  if [[ -z $INOTIFYWAIT_PATH ]]; then
    echo "need to inotify-tools package"
    echo "install inotify-tools"
    local rpm_path
    local dpkg_path
    rpm_path="$(type -p rpm)"
    dpkg_path="$(type -p dpkg)"
    if [[ -e "$rpm_path" ]]; then
      curl -w ' [:: %{size_download} byte has been downloaded ::]\n' -L -# "$INOTIFY_DOWNLOAD_URL"?"$(date +%s)" -o /tmp/inotify-tools-3.14.tar.gz
      exception_check
      tar -zxvf /tmp/inotify-tools-3.14.tar.gz -C /tmp/
      exception_check
      cd /tmp/inotify-tools-3.14 || return
      exception_check
      ./configure
      exception_check
      make
      exception_check
      make install
      exception_check
    elif [[ -e "$dpkg_path" ]]; then
      apt-get install -y inotify-tools
      exception_check
    else
      echo "Can't install inotify-tools package"
      exit 0
    fi
  fi
}

#######################################
# message parsing from Last log message
#
# Arguments:
#   original_log_message
# Returns:
#   None
#
#######################################
function run::message_parse() {
  original_log_message=("$@")
  if [[ "$(echo "${original_log_message[@]}" | grep -c "$CHANGED_FILE_FILTER" )" -eq 0 ]]; then
    logging_month="$(echo "${original_log_message[@]}" | awk '{print $1}')"
    logging_day="$(echo "${original_log_message[@]}" | awk '{print $2}')"
    logging_time="$(echo "${original_log_message[@]}" | awk '{print $3}')"
    node_name="$(echo "${original_log_message[@]}" | awk '{print $4}')"
    login_id="$(echo "${original_log_message[@]}" | awk '{print $5}' | sed "s/\://")"
    executed_id="$(echo "${original_log_message[@]}" | awk '{print $6}')"
    connect_ip="$(echo "${original_log_message[@]}" | awk '{print $7}')"
    shell_pid="$(echo "${original_log_message[@]}" | awk '{print $8}' | sed "s/\[//" | sed "s/\]//")"
    executed_path="$(echo "${original_log_message[@]}" | awk '{print $9}' | sed "s/\[//" | sed "s/\]//")"
    running_result="$(echo "${original_log_message[@]}" | awk '{print $NF}' | sed "s/\[//" | sed "s/\]//")"
    running_command="$(echo "${original_log_message[@]}" | awk -F]: '{print $2}' | sed "s/\[$running_result\]//")"
    editor_check="$(echo "$running_command" | awk '{print $1}')"
    if [[ $editor_check == "sudo" ]]; then
      editor_check="$(echo "$running_command" | awk '{print $2}')"
    fi
  else
    changed_file_name="$(echo "${original_log_message[@]}" | awk '{print $NF}')"
    #shell_pid="$(echo "${original_log_message[@]}" | awk '{print $8}' | sed "s/\[//" | sed "s/\]//")"
    shell_pid="$(echo "${original_log_message[@]}" | awk -F: '{print $4}' | awk '{print $NF}' | sed "s/\[//" | sed "s/\]//")"
  fi
}

#######################################
# message send to wbhe server
#
# Arguments:
#   None
# Returns:
#   None
#
#######################################
function run::send_message() {
  last_log_message="$(tail -n1 "$WBHE_LOG_FILE")"
  run::message_parse "$last_log_message"
  if [[ ! -e "$CHANGE_FILE_STORE"."$shell_pid" ]]; then
    touch "$CHANGE_FILE_STORE"."$shell_pid"
  fi
  if [[ ! -e "$CHANGE_FILE_STATUS"."$shell_pid" ]]; then
    touch "$CHANGE_FILE_STATUS"."$shell_pid"
  fi
  if [[ "$(echo "$last_log_message" | grep  -c "$CHANGED_FILE_FILTER")" -eq 1 ]]; then
    if [[ -z "$(cat "$CHANGE_FILE_STATUS"."$shell_pid")" ]]; then
      cat "$changed_file_name" > "$CHANGE_FILE_STORE"."$shell_pid"
      send_message=""
      echo "changed" > "$CHANGE_FILE_STATUS"."$shell_pid"
    else
      cat "$changed_file_name" >> "$CHANGE_FILE_STORE"."$shell_pid"
      send_message=""
    fi
  elif [ "$editor_check" == "vi" ] || [ "$editor_check" == "vim" ]; then
    check_changed_filename="$(tail -n2 "$WBHE_LOG_FILE" | head -n 1)"
    if [[ "$(echo "$check_changed_filename" | grep  -c "$CHANGED_FILE_FILTER" )" -eq 1 ]]; then
      run::message_parse "$check_changed_filename"
      changed_file_hash_result="$(md5sum "$changed_file_name" | awk '{print $1}')"
      send_message="$logging_month :: $logging_day :: $logging_time :: $node_name :: $login_id :: $executed_id :: $connect_ip :: $shell_pid :: $executed_path :: $running_command :: $running_result :: $changed_file_hash_result"
      curl -X POST "$WBHE_SERVER_URL" -H "cache-control: no-cache" -H "content-type: application/x-www-form-urlencoded" -H "x-api-key: $X_API_KEY" -d "log=$send_message" 2>/dev/null &
      sleep 5
      curl -X POST "$WBHE_SERVER_UPLOAD_URL" -H "cache-control: no-cache" -H "content-type: multipart/form-data" -H "x-api-key: $X_API_KEY" -F md5="$changed_file_hash_result" -F filedata=@"$CHANGE_FILE_STORE"."$shell_pid" 2>/dev/null &
      cat "$CHANGE_FILE_STORE"."$shell_pid"
      echo "" > "$CHANGE_FILE_STATUS"."$shell_pid"
      send_message=""
    fi
  else
    if [[ "$(echo "$last_log_message" | grep -c "$MESSAGE_REPEAT_FILTER")" -eq 0 ]]; then
      send_message="$logging_month :: $logging_day :: $logging_time :: $node_name :: $login_id :: $executed_id :: $connect_ip :: $shell_pid :: $executed_path :: $running_command :: $running_result ::"
    else
      send_message=""
    fi
  fi

  if [[ -n "$send_message" ]]; then
    curl -X POST "$WBHE_SERVER_URL" -H "cache-control: no-cache" -H "content-type: application/x-www-form-urlencoded" -H "x-api-key: $X_API_KEY" -d "log=$send_message" 2>/dev/null &
  fi
  unset logging_month logging_day logging_time node_name login_id executed_id connect_ip shell_pid executed_path running_result running_command changed_file_name
}

#######################################
# check log file modify
#   When the log file is modified then call run::send_message function
#
# Arguments:
#   None
# Returns:
#   None
#
#######################################
function run() {
  while "$INOTIFYWAIT_PATH" -e modify "$WBHE_LOG_FILE"; do
   run::send_message &
  done
}

#######################################
# print help
#   print help page
#
# Arguments:
#   None
# Returns:
#   None
#
#######################################
function Help_Command() {
cat << EOF

wbhe_agent [OPTION] [COMMAND]

OPTION
  -u --url change wbhe server url. must be include http:// or https://
  -k --key change wbhe api key

COMMAND
  run		running agent
  stop		stop agent
  updatei	agent update
  install 	install bhe
  deletei	delete bhe
  set  		set config (must be using with option)

EOF
}


case "$COMMAND" in
run)
  check_tools
  #run daemon
  run  >/dev/null 2>&1 &
  ;;
stop)
  stop
  ;;
update)
  update
  ;;
install)
  #bash_history_extend install
  curl -L https://raw.githubusercontent.com/jaekwon-park/bash_history_extend/master/Installer.sh -o /tmp/bhe_installer
  chmod +x /tmp/bhe_installer
  /tmp/bhe_installer -i
  ;;
delete)
  #bash_history_extend install
  curl -L https://raw.githubusercontent.com/jaekwon-park/bash_history_extend/master/Installer.sh -o /tmp/bhe_installer
  chmod +x /tmp/bhe_installer
  /tmp/bhe_installer -d
  ;;
set)
  for i in $(seq 0 $SET_OPTION_VALUE_COUNT); do
    set "${SET_OPTION[$i]}" "${SET_OPTION_VALUE[$i]}"
  done
  ;;
*)
  Help_Command
  ;;
esac
